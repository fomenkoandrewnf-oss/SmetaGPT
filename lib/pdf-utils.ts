import { PDFDocument } from 'pdf-lib'
import sharp from 'sharp'
import { PROJECT_FILES_BUCKET, getSignedUrl, getSupabaseServiceRoleClient } from './supabase'

// ============================================
// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OpenAI Vision
// ============================================

export async function convertPdfToImages(
  pdfBuffer: Buffer,
  maxPages: number = 5
): Promise<Buffer[]> {
  // –î–ª—è MVP –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥:
  // 1. –ß–∏—Ç–∞–µ–º PDF —á–µ—Ä–µ–∑ pdf-lib
  // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  
  const pdfDoc = await PDFDocument.load(pdfBuffer)
  const pageCount = Math.min(pdfDoc.getPageCount(), maxPages)
  
  console.log(`üìÑ PDF —Å–æ–¥–µ—Ä–∂–∏—Ç ${pdfDoc.getPageCount()} —Å—Ç—Ä–∞–Ω–∏—Ü, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${pageCount}`)
  
  const images: Buffer[] = []
  
  for (let i = 0; i < pageCount; i++) {
    console.log(`  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${i + 1}/${pageCount}...`)
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const singlePageDoc = await PDFDocument.create()
    const [copiedPage] = await singlePageDoc.copyPages(pdfDoc, [i])
    singlePageDoc.addPage(copiedPage)
    
    const pdfBytes = await singlePageDoc.save()
    
    // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF->Image –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
    // –í MVP –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ Playwright
    // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤–µ—Ä–Ω—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    images.push(Buffer.from(pdfBytes))
  }
  
  return images
}

// ============================================
// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Vision API
// ============================================

export async function optimizeImageForVision(
  imageBuffer: Buffer,
  maxWidth: number = 2000,
  quality: number = 85
): Promise<Buffer> {
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Vision API
  return await sharp(imageBuffer)
    .resize(maxWidth, null, {
      fit: 'inside',
      withoutEnlargement: true
    })
    .jpeg({ quality })
    .toBuffer()
}

// ============================================
// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase Storage –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ URL
// ============================================

export async function uploadToStorageAndGetUrl(
  buffer: Buffer,
  path: string,
  contentType: string = 'image/jpeg'
): Promise<string> {
  const storage = getSupabaseServiceRoleClient()

  const { error: uploadError } = await storage
    .from(PROJECT_FILES_BUCKET)
    .upload(path, buffer, {
      contentType,
      cacheControl: '3600',
      upsert: true
    })

  if (uploadError) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Supabase Storage: ${uploadError.message}`)
  }

  return await getSignedUrl(path)
}

// ============================================
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL (TTL)
// ============================================

export async function generateSignedUrl(
  storagePath: string,
  expiresInSeconds: number = 600 // 10 –º–∏–Ω—É—Ç
): Promise<string> {
  return await getSignedUrl(storagePath, expiresInSeconds)
}

// ============================================
// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
// ============================================

export interface FileValidationResult {
  valid: boolean
  error?: string
  mimeType?: string
  sizeBytes?: number
  pageCount?: number
}

export async function validateUploadedFile(
  buffer: Buffer,
  originalName: string,
  maxSizeMB: number = 25
): Promise<FileValidationResult> {
  const sizeBytes = buffer.length
  const sizeMB = sizeBytes / (1024 * 1024)
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
  if (sizeMB > maxSizeMB) {
    return {
      valid: false,
      error: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${sizeMB.toFixed(1)}MB (–º–∞–∫—Å–∏–º—É–º ${maxSizeMB}MB)`
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
  const header = buffer.slice(0, 4).toString('hex')
  let mimeType: string
  let pageCount: number | undefined
  
  if (header === '25504446') {
    // PDF
    mimeType = 'application/pdf'
    try {
      const pdfDoc = await PDFDocument.load(buffer)
      pageCount = pdfDoc.getPageCount()
      
      if (pageCount > 20) {
        return {
          valid: false,
          error: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pageCount} (–º–∞–∫—Å–∏–º—É–º 20)`
        }
      }
    } catch (error) {
      return {
        valid: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å PDF —Ñ–∞–π–ª'
      }
    }
  } else if (header.startsWith('ffd8ff')) {
    // JPEG
    mimeType = 'image/jpeg'
    pageCount = 1
  } else if (header.startsWith('89504e47')) {
    // PNG
    mimeType = 'image/png'
    pageCount = 1
  } else {
    return {
      valid: false,
      error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF, JPG –∏–ª–∏ PNG'
    }
  }
  
  return {
    valid: true,
    mimeType,
    sizeBytes,
    pageCount
  }
}

