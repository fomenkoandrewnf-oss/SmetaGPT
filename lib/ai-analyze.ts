import { openai } from './ai-client'
import { PROMPT_ROOM_EXTRACTION, buildUserInstruction } from './ai-prompts'
import { AnalysisResult, PreuploadHints, AnalysisResultSchema } from './validators'
import { AI_MODELS, TOKEN_COSTS, SANITY_THRESHOLDS } from './constants'
import { prisma } from './db'

// ============================================
// –¢–∏–ø—ã
// ============================================

interface PageAnalysisResult {
  rooms: any[]
  total_area_m2: number
  ceiling_height_m?: number
  bathrooms_count: number
  features?: any
  notes?: string
}

interface AnalysisContext {
  projectId: string
  fileId: string
  imageUrls: string[]
  hints?: PreuploadHints
}

// ============================================
// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
// ============================================

export async function analyzeDesignFile(
  context: AnalysisContext
): Promise<AnalysisResult & { warnings: string[] }> {
  const { projectId, fileId, imageUrls, hints } = context
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è MVP
  const pagesToAnalyze = imageUrls.slice(0, 5)
  const pageResults: PageAnalysisResult[] = []
  
  console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ ${pagesToAnalyze.length} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`)
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  for (let i = 0; i < pagesToAnalyze.length; i++) {
    const url = pagesToAnalyze[i]
    console.log(`  üìÑ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${i + 1}/${pagesToAnalyze.length}`)
    
    try {
      const result = await analyzePageWithVision(url, hints)
      pageResults.push(result)
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
      await logAiRequest(projectId, PROMPT_ROOM_EXTRACTION, JSON.stringify(result))
      
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${i + 1}:`, error)
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É ${i + 1}: ${error}`)
    }
  }
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  const merged = mergePageResults(pageResults)
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const validated = AnalysisResultSchema.parse(merged)
  
  // –°–∞–Ω–∏—Ç–∏-—á–µ–∫ —Å hints
  const warnings = performSanityCheck(validated, hints)
  
  return {
    ...validated,
    warnings
  }
}

// ============================================
// –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ Vision API
// ============================================

async function analyzePageWithVision(
  imageUrl: string,
  hints?: PreuploadHints
): Promise<PageAnalysisResult> {
  
  const startTime = Date.now()
  
  const response = await openai.chat.completions.create({
    model: AI_MODELS.VISION,
    messages: [
      {
        role: 'system',
        content: PROMPT_ROOM_EXTRACTION
      },
      {
        role: 'user',
        content: [
          {
            type: 'text',
            text: buildUserInstruction(hints)
          },
          {
            type: 'image_url',
            image_url: { url: imageUrl }
          }
        ]
      }
    ],
    response_format: { type: 'json_object' },
    max_tokens: 2000
  })
  
  const duration = Date.now() - startTime
  console.log(`  ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ ${duration}ms`)
  
  const content = response.choices[0].message.content
  if (!content) {
    throw new Error('OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')
  }
  
  return JSON.parse(content)
}

// ============================================
// –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
// ============================================

function mergePageResults(results: PageAnalysisResult[]): AnalysisResult {
  if (results.length === 0) {
    throw new Error('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è')
  }
  
  // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
  if (results.length === 1) {
    return {
      total_area_m2: results[0].total_area_m2,
      ceiling_height_m: results[0].ceiling_height_m,
      rooms: results[0].rooms,
      bathrooms_count: results[0].bathrooms_count,
      notes: results[0].notes
    }
  }
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏)
  const allRooms = results.flatMap(r => r.rooms)
  const uniqueRooms = deduplicateRooms(allRooms)
  
  // –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å (–æ–±—ã—á–Ω–æ –Ω–∞ —Å–≤–æ–¥–Ω–æ–º –ø–ª–∞–Ω–µ)
  const total_area_m2 = Math.max(...results.map(r => r.total_area_m2))
  
  // –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–∞ ‚Äî –ø–µ—Ä–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è
  const ceiling_height_m = results.find(r => r.ceiling_height_m)?.ceiling_height_m
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤ ‚Äî –º–∞–∫—Å–∏–º—É–º –∏–ª–∏ –ø–æ —Ñ–∞–∫—Ç—É –ø–æ–º–µ—â–µ–Ω–∏–π
  const bathroomsFromRooms = uniqueRooms.filter(r => r.is_wet_zone).length
  const bathroomsFromData = Math.max(...results.map(r => r.bathrooms_count || 0))
  const bathrooms_count = Math.max(bathroomsFromRooms, bathroomsFromData)
  
  return {
    total_area_m2,
    ceiling_height_m,
    rooms: uniqueRooms,
    bathrooms_count,
    notes: '–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–ª–∞–Ω–∞'
  }
}

// ============================================
// –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ–º–µ—â–µ–Ω–∏–π
// ============================================

function deduplicateRooms(rooms: any[]): any[] {
  const map = new Map<string, any>()
  
  for (const room of rooms) {
    const key = `${room.name}_${room.area_m2}`.toLowerCase()
    
    if (!map.has(key)) {
      map.set(key, room)
    } else {
      // –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–±–µ—Ä—ë–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π)
      const existing = map.get(key)!
      map.set(key, {
        ...existing,
        perimeter_m: existing.perimeter_m || room.perimeter_m,
        height_m: existing.height_m || room.height_m,
        notes: existing.notes || room.notes
      })
    }
  }
  
  return Array.from(map.values())
}

// ============================================
// –°–∞–Ω–∏—Ç–∏-—á–µ–∫ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
// ============================================

function performSanityCheck(
  analysis: AnalysisResult,
  hints?: PreuploadHints
): string[] {
  if (!hints) return []
  
  const warnings: string[] = []
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—â–∞–¥–∏
  const areaDeviation = Math.abs(analysis.total_area_m2 - hints.floor_area_m2) / hints.floor_area_m2
  if (areaDeviation > SANITY_THRESHOLDS.AREA_DEVIATION_PERCENT) {
    warnings.push(
      `–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ >10%: –∏–∑–≤–ª–µ—á–µ–Ω–æ ${analysis.total_area_m2}–º¬≤, —É–∫–∞–∑–∞–Ω–æ ${hints.floor_area_m2}–º¬≤ (${(areaDeviation * 100).toFixed(1)}%)`
    )
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç (–∂–∏–ª—ã–µ –∫–æ–º–Ω–∞—Ç—ã, –±–µ–∑ —Å–∞–Ω—É–∑–ª–æ–≤ –∏ –∫—É—Ö–Ω–∏)
  const livingRooms = analysis.rooms.filter(r => 
    !r.is_wet_zone && 
    !r.name.toLowerCase().includes('–∫—É—Ö–Ω—è') &&
    !r.name.toLowerCase().includes('–∫–æ—Ä–∏–¥–æ—Ä') &&
    !r.name.toLowerCase().includes('—Ö–æ–ª–ª')
  )
  const roomsDeviation = Math.abs(livingRooms.length - hints.living_rooms_count)
  if (roomsDeviation > SANITY_THRESHOLDS.ROOMS_DEVIATION_ABS) {
    warnings.push(
      `–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç: –∏–∑–≤–ª–µ—á–µ–Ω–æ ${livingRooms.length}, —É–∫–∞–∑–∞–Ω–æ ${hints.living_rooms_count}`
    )
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–Ω—É–∑–ª–æ–≤
  const bathroomsDeviation = Math.abs(analysis.bathrooms_count - hints.bathrooms_count)
  if (bathroomsDeviation > SANITY_THRESHOLDS.BATHROOMS_DEVIATION_ABS) {
    warnings.push(
      `–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤: –∏–∑–≤–ª–µ—á–µ–Ω–æ ${analysis.bathrooms_count}, —É–∫–∞–∑–∞–Ω–æ ${hints.bathrooms_count}`
    )
  }
  
  return warnings
}

// ============================================
// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∑–∞–ø—Ä–æ—Å–æ–≤
// ============================================

async function logAiRequest(
  projectId: string,
  prompt: string,
  response: string,
  tokensIn: number = 0,
  tokensOut: number = 0
) {
  const model = AI_MODELS.VISION
  const costs = TOKEN_COSTS[model]
  const costUsd = (tokensIn * costs.input) + (tokensOut * costs.output)
  
  await prisma.aiLog.create({
    data: {
      projectId,
      model,
      prompt: prompt.substring(0, 5000), // –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è –ë–î
      response: response.substring(0, 10000),
      costUsd,
      tokensIn,
      tokensOut
    }
  })
}

